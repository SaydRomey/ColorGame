// gdext/src/{{LIB_NAME}}/{{CLASS_NAME}}.cpp

#include "{{CLASS_NAME}}.h"

using namespace godot;

/* Static function that Godot will call to find out which methods can be called and which properties it exposes
** Bindings needed if we expose properties/methods/signals to the editor/GDScript.
*/
void	{{CLASS_NAME}}::_bind_methods()
{
	ClassDB::bind_method(D_METHOD("hello"), &{{CLASS_NAME}}::hello);
}

{{CLASS_NAME}}::{{CLASS_NAME}}()
: _message("hello from {{CLASS_NAME}}")
{
	// Initialization here
}

{{CLASS_NAME}}::~{{CLASS_NAME}}()
{
	// Add our cleanup here if needed
}

void	{{CLASS_NAME}}::_ready()
{
	// Called when added to scene tree; do startup work here.

	// If we use GDREGISTER_CLASS and not GDREGISTER_RUNTIME_CLASS, this prevents code from happening directly in the editor
	const bool	in_editor = Engine::get_singleton()->is_editor_hint();
	set_process(!in_editor);				// disable idle processing in editor
	
	// set_physics_process(false);			// if we use _physics_process
	
	if (!in_editor)
		UtilityFunctions::print(hello());	// visible confirmation in output
}

void	{{CLASS_NAME}}::_process(double delta)
{
	if (Engine::get_singleton()->is_editor_hint())
		return ; // safety guard
	// 
}

// Example method you could call from GDScript:
String {{CLASS_NAME}}::hello()
{
	return (_message);
}
