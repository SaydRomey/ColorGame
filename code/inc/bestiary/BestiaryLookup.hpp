// BestiaryLookup.hpp

#ifndef BESTIARY_LOOKUP_HPP
# define BESTIARY_LOOKUP_HPP

# include "BestiaryIDs.hpp"
# include <string>
# include <map>
# include <stdexcept>

/* ---------------------------------------- */
/* helper : builds a singleton lookup-table */
/* -----------------------------------------*/
inline const std::map<std::string, BestiaryID>& beastLookupTable(void)
{
	typedef std::map<std::string, BestiaryID>	map_t;
	static map_t*	tbl = 0;
	if (!tbl)
	{
		tbl = new map_t;

#define ADD(ID) (*tbl)["BEAST_" #ID] = BEAST_##ID
		ADD(ABYSSAL_CURRENT);          ADD(ALCHEMICAL_ECHO);
		ADD(AMBERCOIL_ASP);            ADD(ASHWEAVER_RECLUSE);
		ADD(ASHWROUGHT_COLOSSUS);      ADD(BANNERBOUND_REVENANT);
		ADD(BLOODROOT_EFFIGY);         ADD(BLOOMROT_TITAN);
		ADD(BLOOMVEIL_WIDOW);          ADD(BOGLIGHT_MIMIC);
		ADD(CAPUT_MARIONETTE);         ADD(CHARTREUSE_HUSK);
		ADD(CINNABAR_SCARAB);          ADD(CITRINE_GOLEM);
		ADD(CRIMSON_ECHO);             ADD(DOPPELSHADE);
		ADD(FANDANCER_FRAGMENT);       ADD(FANGBLOOM_WYRM);
		ADD(FEATHERED_NULL);           ADD(FOX_MIRAGE);
		ADD(FRACTAL_SHARDLING);        ADD(FUNERAL_DANCER);
		ADD(GAMBOGE_DJINNLING);        ADD(GLASSBORNE_ECHO);
		ADD(GLASSLASH_SERPENT);        ADD(GLITTERING_GRIMOIRE);
		ADD(GROVEBOUND_SENTINEL);      ADD(HELIOTROPIC_LURKER);
		ADD(HOLLOW_PROPHET);           ADD(HUE_LEECHES);
		ADD(HUEFRACTALS);              ADD(LAVA_FUSED_BEHEMOTH);
		ADD(LILYBORN_MIRAGE);          ADD(LIMEROOT_TRICKSTER);
		ADD(MEMORY_GRAFTER);           ADD(MEMORY_HUSK);
		ADD(MEMORY_LEECH);             ADD(MIRAGE_REVENANT);
		ADD(MIRRORWAKE_DUELIST);       ADD(MIRRORTHIRST_WYRM);
		ADD(MOSSGRAVE_REVENANT);       ADD(MOTH_WITCH_VERDANT_SPIRAL);
		ADD(NULL_ROOT);                ADD(NULLBORN_HUSKS);
		ADD(NULLSHADE_ECHO);           ADD(NULLSHADE_REVENANT);
		ADD(OCHRE_GOLEM);              ADD(PHYLACTERY_SWARM);
		ADD(PRISM_UNFORM);             ADD(RAZZFLARE_IMP);
		ADD(RED_WIDOW);                ADD(RUSTWORN_JUDGE);
		ADD(SAPBORN_STALKER);          ADD(SEARBLOOD_CULTIST);
		ADD(SHATTERGLASS_CHOIR);       ADD(SILENCE_INCARNATE);
		ADD(SKYCALL_WRAITH);           ADD(SOOTSHADE_COLLECTOR);
		ADD(SORROWWING);               ADD(SPECTRAL_HARVESTER);
		ADD(SPOREKIN);                 ADD(STORMWRIT_HOUND);
		ADD(SUNBURNT_JACKAL);          ADD(SUNDIAL_SCARWALKER);
		ADD(SUNFLARE_MARIONETTE);      ADD(TAPESTRY_WATCHER_NULLSHADE);
		ADD(TAPESTRY_WATCHER);         ADD(TEMPEST_MARIONETTE);
		ADD(THE_BOUND);                ADD(COLORLESS_SHAPE);
		ADD(SEVENTH_HUE);              ADD(UNHUED_CHOIR);
		ADD(THORNWRITHE_BEAST);        ADD(THULIAN_VOWKEEPER);
		ADD(TIDEWORN_APOSTLE);         ADD(TYRIAN_ECHO);
		ADD(VEILSHIFT_MATRON);         ADD(VERDANT_MAW);
		ADD(WHISPERGLASS_WYRM);        ADD(WICKBONE_LANTERN);
		ADD(WICKERBORN);               ADD(WOUND_REMNANT);
#undef ADD
	}
	return (*tbl);
}

/* ------------------------------------------------------------------ */
inline BestiaryID	toBestiaryID(const std::string& s)
{
	const std::map<std::string, BestiaryID>&	t = beastLookupTable();

	std::map<std::string, BestiaryID>::const_iterator	it = t.find(s);
	if (it == t.end())
		throw (std::runtime_error("Unknown BestiaryID: " + s));

	return (it->second);
}

// /// Simple map from the JSON key to our enum:
// inline BestiaryID	toBestiaryID(const std::string& s)
// {
// 	static const std::map<std::string, BestiaryID> table = {
// 		{"BEAST_ABYSSAL_CURRENT", BEAST_ABYSSAL_CURRENT},
// 		{"BEAST_ALCHEMICAL_ECHO", BEAST_ALCHEMICAL_ECHO},
// 		{"BEAST_AMBERCOIL_ASP", BEAST_AMBERCOIL_ASP},
// 		{"BEAST_ASHWEAVER_RECLUSE", BEAST_ASHWEAVER_RECLUSE},
// 		{"BEAST_ASHWROUGHT_COLOSSUS", BEAST_ASHWROUGHT_COLOSSUS},
// 		{"BEAST_BANNERBOUND_REVENANT", BEAST_BANNERBOUND_REVENANT},
// 		{"BEAST_BLOODROOT_EFFIGY", BEAST_BLOODROOT_EFFIGY},
// 		{"BEAST_BLOOMROT_TITAN", BEAST_BLOOMROT_TITAN},
// 		{"BEAST_BLOOMVEIL_WIDOW", BEAST_BLOOMVEIL_WIDOW},
// 		{"BEAST_BOGLIGHT_MIMIC", BEAST_BOGLIGHT_MIMIC},
// 		{"BEAST_CAPUT_MARIONETTE", BEAST_CAPUT_MARIONETTE},
// 		{"BEAST_CHARTREUSE_HUSK", BEAST_CHARTREUSE_HUSK},
// 		{"BEAST_CINNABAR_SCARAB", BEAST_CINNABAR_SCARAB},
// 		{"BEAST_CITRINE_GOLEM", BEAST_CITRINE_GOLEM},
// 		{"BEAST_CRIMSON_ECHO", BEAST_CRIMSON_ECHO},
// 		{"BEAST_DOPPELSHADE", BEAST_DOPPELSHADE},
// 		{"BEAST_FANDANCER_FRAGMENT", BEAST_FANDANCER_FRAGMENT},
// 		{"BEAST_FANGBLOOM_WYRM", BEAST_FANGBLOOM_WYRM},
// 		{"BEAST_FEATHERED_NULL", BEAST_FEATHERED_NULL},
// 		{"BEAST_FOX_MIRAGE", BEAST_FOX_MIRAGE},
// 		{"BEAST_FRACTAL_SHARDLING", BEAST_FRACTAL_SHARDLING},
// 		{"BEAST_FUNERAL_DANCER", BEAST_FUNERAL_DANCER},
// 		{"BEAST_GAMBOGE_DJINNLING", BEAST_GAMBOGE_DJINNLING},
// 		{"BEAST_GLASSBORNE_ECHO", BEAST_GLASSBORNE_ECHO},
// 		{"BEAST_GLASSLASH_SERPENT", BEAST_GLASSLASH_SERPENT},
// 		{"BEAST_GLITTERING_GRIMOIRE", BEAST_GLITTERING_GRIMOIRE},
// 		{"BEAST_GROVEBOUND_SENTINEL", BEAST_GROVEBOUND_SENTINEL},
// 		{"BEAST_HELIOTROPIC_LURKER", BEAST_HELIOTROPIC_LURKER},
// 		{"BEAST_HOLLOW_PROPHET", BEAST_HOLLOW_PROPHET},
// 		{"BEAST_HUE_LEECHES", BEAST_HUE_LEECHES},
// 		{"BEAST_HUEFRACTALS", BEAST_HUEFRACTALS},
// 		{"BEAST_LAVA_FUSED_BEHEMOTH", BEAST_LAVA_FUSED_BEHEMOTH},
// 		{"BEAST_LILYBORN_MIRAGE", BEAST_LILYBORN_MIRAGE},
// 		{"BEAST_LIMEROOT_TRICKSTER", BEAST_LIMEROOT_TRICKSTER},
// 		{"BEAST_MEMORY_GRAFTER", BEAST_MEMORY_GRAFTER},
// 		{"BEAST_MEMORY_HUSK", BEAST_MEMORY_HUSK},
// 		{"BEAST_MEMORY_LEECH", BEAST_MEMORY_LEECH},
// 		{"BEAST_MIRAGE_REVENANT", BEAST_MIRAGE_REVENANT},
// 		{"BEAST_MIRRORWAKE_DUELIST", BEAST_MIRRORWAKE_DUELIST},
// 		{"BEAST_MIRRORTHIRST_WYRM", BEAST_MIRRORTHIRST_WYRM},
// 		{"BEAST_MOSSGRAVE_REVENANT", BEAST_MOSSGRAVE_REVENANT},
// 		{"BEAST_MOTH_WITCH_VERDANT_SPIRAL", BEAST_MOTH_WITCH_VERDANT_SPIRAL},
// 		{"BEAST_NULL_ROOT", BEAST_NULL_ROOT},
// 		{"BEAST_NULLBORN_HUSKS", BEAST_NULLBORN_HUSKS},
// 		{"BEAST_NULLSHADE_ECHO", BEAST_NULLSHADE_ECHO},
// 		{"BEAST_NULLSHADE_REVENANT", BEAST_NULLSHADE_REVENANT},
// 		{"BEAST_OCHRE_GOLEM", BEAST_OCHRE_GOLEM},
// 		{"BEAST_PHYLACTERY_SWARM", BEAST_PHYLACTERY_SWARM},
// 		{"BEAST_PRISM_UNFORM", BEAST_PRISM_UNFORM},
// 		{"BEAST_RAZZFLARE_IMP", BEAST_RAZZFLARE_IMP},
// 		{"BEAST_RED_WIDOW", BEAST_RED_WIDOW},
// 		{"BEAST_RUSTWORN_JUDGE", BEAST_RUSTWORN_JUDGE},
// 		{"BEAST_SAPBORN_STALKER", BEAST_SAPBORN_STALKER},
// 		{"BEAST_SEARBLOOD_CULTIST", BEAST_SEARBLOOD_CULTIST},
// 		{"BEAST_SHATTERGLASS_CHOIR", BEAST_SHATTERGLASS_CHOIR},
// 		{"BEAST_SILENCE_INCARNATE", BEAST_SILENCE_INCARNATE},
// 		{"BEAST_SKYCALL_WRAITH", BEAST_SKYCALL_WRAITH},
// 		{"BEAST_SOOTSHADE_COLLECTOR", BEAST_SOOTSHADE_COLLECTOR},
// 		{"BEAST_SORROWWING", BEAST_SORROWWING},
// 		{"BEAST_SPECTRAL_HARVESTER", BEAST_SPECTRAL_HARVESTER},
// 		{"BEAST_SPOREKIN", BEAST_SPOREKIN},
// 		{"BEAST_STORMWRIT_HOUND", BEAST_STORMWRIT_HOUND},
// 		{"BEAST_SUNBURNT_JACKAL", BEAST_SUNBURNT_JACKAL},
// 		{"BEAST_SUNDIAL_SCARWALKER", BEAST_SUNDIAL_SCARWALKER},
// 		{"BEAST_SUNFLARE_MARIONETTE", BEAST_SUNFLARE_MARIONETTE},
// 		{"BEAST_TAPESTRY_WATCHER_NULLSHADE", BEAST_TAPESTRY_WATCHER_NULLSHADE},
// 		{"BEAST_TAPESTRY_WATCHER", BEAST_TAPESTRY_WATCHER},
// 		{"BEAST_TEMPEST_MARIONETTE", BEAST_TEMPEST_MARIONETTE},
// 		{"BEAST_THE_BOUND", BEAST_THE_BOUND},
// 		{"BEAST_COLORLESS_SHAPE", BEAST_COLORLESS_SHAPE},
// 		{"BEAST_SEVENTH_HUE", BEAST_SEVENTH_HUE},
// 		{"BEAST_UNHUED_CHOIR", BEAST_UNHUED_CHOIR},
// 		{"BEAST_THORNWRITHE_BEAST", BEAST_THORNWRITHE_BEAST},
// 		{"BEAST_THULIAN_VOWKEEPER", BEAST_THULIAN_VOWKEEPER},
// 		{"BEAST_TIDEWORN_APOSTLE", BEAST_TIDEWORN_APOSTLE},
// 		{"BEAST_TYRIAN_ECHO", BEAST_TYRIAN_ECHO},
// 		{"BEAST_VEILSHIFT_MATRON", BEAST_VEILSHIFT_MATRON},
// 		{"BEAST_VERDANT_MAW", BEAST_VERDANT_MAW},
// 		{"BEAST_WHISPERGLASS_WYRM", BEAST_WHISPERGLASS_WYRM},
// 		{"BEAST_WICKBONE_LANTERN", BEAST_WICKBONE_LANTERN},
// 		{"BEAST_WICKERBORN", BEAST_WICKERBORN},
// 		{"BEAST_WOUND_REMNANT", BEAST_WOUND_REMNANT},
// 	};

// 	std::map<std::string, BestiaryID>::const_iterator	it = table.find(s);
// 	if (it == table.end())
// 		throw (std::runtime_error("Unknown BestiaryID: " + s));
// 	return (it->second);
// }

/*
const char* getBeastIDString(BestiaryID id) {
	switch (id) {
		case BEAST_ABYSSAL_CURRENT: return "BEAST_ABYSSAL_CURRENT";
		case BEAST_ALCHEMICAL_ECHO: return "BEAST_ALCHEMICAL_ECHO";
		// ... all others ...
		default: return "";
	}
}
*/

#endif // BESTIARY_LOOKUP_HPP
